%{
#include "global.h"
#include "engine.h"
#include "y.tab.h"  /* Token definitions generated by bison */

extern game_engine_t game;
%}

%option noyywrap
%option nounput
%option noinput

DIGIT          [0-9]
WHITESPACE     [ \t]
NEWLINE        [\n\r]
IDENTIFIER     [_a-zA-Z][_a-zA-Z0-9]*
/* [ \t\n] */

%%

(\/\/|#).*               /* comments */
\/\*[^\*]*\*\/           { for (char *i=yytext; i!=NULL; i=index(i+1,'\n')) { yylineno++; } }
{WHITESPACE}+
{NEWLINE}                { yylineno++; }

map      { return MAP; }
material { return MATERIAL; }
entity   { return ENTITY; }
action   { return ACTION; }
extends  { return EXTENDS; }
pc       { return PC; }
npc      { return NPC; }
object   { return OBJECT; }
with     { return WITH; }
tile     { return TILE; }
color    { return COLOR; }
solid    { return SOLID; }
visible  { return VISIBLE; }
name     { return NAME; }
hp       { return HP; }
mp       { return MP; }
str      { return STR; }
dex      { return DEX; }
con      { return CON; }
intl     { return INTL; }
wiz      { return WIZ; }
cha      { return CHA; }
range_sight { return RANGE_SIGHT; }
aggressive  { return AGGRESSIVE; }
\+=     { return EQ_ADD; }
\-=     { return EQ_SUB; }
\*=     { return EQ_MUL; }
\/=     { return EQ_DIV; }
==      { return EQ; }
!=      { return NE; }
\<      { return LT; }
\<=     { return LE; }
>       { return GT; }
>=      { return GE; }
or      { return OR; }
and     { return AND; }
not     { return NOT; }
on_touch    { return ON_TOUCH; }
on_interact { return ON_INTERACT; }
black   { yylval._int = COLOR_BLACK;   return COLOR_CONSTANT; }
red     { yylval._int = COLOR_RED;     return COLOR_CONSTANT; }
green   { yylval._int = COLOR_GREEN;   return COLOR_CONSTANT; }
yellow  { yylval._int = COLOR_YELLOW;  return COLOR_CONSTANT; }
blue    { yylval._int = COLOR_BLUE;    return COLOR_CONSTANT; }
magenta { yylval._int = COLOR_MAGENTA; return COLOR_CONSTANT; }
cyan    { yylval._int = COLOR_CYAN;    return COLOR_CONSTANT; }
white   { yylval._int = COLOR_WHITE;   return COLOR_CONSTANT; }

true    { yylval._int = 1; return B_TRUE; }
false   { yylval._int = 0; return B_FALSE; }
maybe   { return B_MAYBE; }


'.' { yylval._car = yytext[1]; return MAP_TILE; }

{DIGIT}+                 {
    sscanf(yytext, "%d", &yylval._int);
    return INTEGER;
            }
\"[^\"]*\"               {
    yylval._str = malloc( yyleng-1 );
    memcpy( yylval._str, yytext+1, yyleng-2 );
    yylval._str[yyleng-2]='\0';
    return STRING;
}

{IDENTIFIER}                    { yylval._str = strdup(yytext); return IDENTIFIER; }

.                               { return yytext[0]; }
