%{
#include <string.h>
#include "battle.h"
#include "y.tab.h"  /* Token definitions generated by bison */

extern game_engine_t game;
%}

%option noyywrap

DIGIT          [0-9]
WHITESPACE     [ \t]
NEWLINE        [\n\r]
IDENTIFIER     [_a-zA-Z][_a-zA-Z0-9]*
/* [ \t\n] */

%%

(\/\/|#).*               /* comments */
\/\*[^\*]*\*\/           { for (char *i=yytext; i!=NULL; i=index(i+1,'\n')) { yylineno++; } }
{WHITESPACE}+
{NEWLINE}                { yylineno++; }

map { return MAP; }
material { return MATERIAL; }
entity { return ENTITY; }
action { return ACTION; }
extends { return EXTENDS; }
pc { return PC; }
npc { return NPC; }
object { return OBJECT; }
with { return WITH; }
tile { return TILE; }
color { return COLOR; }
solid { return SOLID; }
visible { return VISIBLE; }
name { return NAME; }
hp { return HP; }
mp { return MP; }
range_sight { return RANGE_SIGHT; }
aggressive { return AGGRESSIVE; }
\+= { return EQ_ADD; }
\-= { return EQ_SUB; }
\*= { return EQ_MUL; }
\/= { return EQ_DIV; }
on_touch { return ON_TOUCH; }
on_interact { return ON_INTERACT; }
black   { yylval.val = COLOR_BLACK;   return COLOR_CONSTANT; }
red     { yylval.val = COLOR_RED;     return COLOR_CONSTANT; }
green   { yylval.val = COLOR_GREEN;   return COLOR_CONSTANT; }
yellow  { yylval.val = COLOR_YELLOW;  return COLOR_CONSTANT; }
blue    { yylval.val = COLOR_BLUE;    return COLOR_CONSTANT; }
magenta { yylval.val = COLOR_MAGENTA; return COLOR_CONSTANT; }
cyan    { yylval.val = COLOR_CYAN;    return COLOR_CONSTANT; }
white   { yylval.val = COLOR_WHITE;   return COLOR_CONSTANT; }

true                     { yylval.val = 1; return B_TRUE; }
false                    { yylval.val = 0; return B_FALSE; }
maybe(\({DIGIT}+\))?     { yylval.val = 123;/*FIXME*/ return B_MAYBE; }


'.' { yylval.car = yytext[1]; return MAP_TILE; }

[+-]?{DIGIT}+            {
    sscanf(yytext, "%d", &yylval.val);
    return INTEGER;
            }
\".*\"                   {
    yylval.str = malloc( yyleng-1 );
    memcpy( yylval.str, yytext+1, yyleng-2 );
    yylval.str[yyleng-2]='\0';
    return STRING;
}

{IDENTIFIER}             { yylval.str = strdup(yytext); return IDENTIFIER; }
{IDENTIFIER}(\.{IDENTIFIER})+   { return COMPOUND_IDENTIFIER; }

.                        { return yytext[0]; }
